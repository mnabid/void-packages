Fix some patches and disable kernel warnings

diff --git a/data/usr/src/bcmwl-6.30.223.271+bdcom/dkms.conf b/data/usr/src/bcmwl-6.30.223.271+bdcom/dkms.conf
index ba4effb..d2d1ee8 100644
--- a/data/usr/src/bcmwl-6.30.223.271+bdcom/dkms.conf
+++ b/data/usr/src/bcmwl-6.30.223.271+bdcom/dkms.conf
@@ -19,5 +19,6 @@ PATCH[10]="0025-add-support-for-Linux-4.14.patch"
 PATCH[11]="0026-add-support-for-Linux-4.15.patch"
 PATCH[12]="0027-add-support-for-linux-5.1.patch"
 PATCH[13]="0028-add-support-for-linux-5.6.patch"
+PATCH[14]="0029-fix-kernel-warnings.patch"
 #PATCH_MATCH[6]="^3.[10-11]"
 AUTOINSTALL="yes"
diff --git a/data/usr/src/bcmwl-6.30.223.271+bdcom/patches/0002-Makefile.patch b/data/usr/src/bcmwl-6.30.223.271+bdcom/patches/0002-Makefile.patch
index afcb46c..f9693cd 100644
--- a/data/usr/src/bcmwl-6.30.223.271+bdcom/patches/0002-Makefile.patch
+++ b/data/usr/src/bcmwl-6.30.223.271+bdcom/patches/0002-Makefile.patch
@@ -1,38 +1,11 @@
-From 15bdf69c7c1fc0d674261b08a22c958e4826bc6b Mon Sep 17 00:00:00 2001
-From: Alberto Milone <alberto.milone@canonical.com>
-Date: Tue, 11 Dec 2012 15:55:08 +0100
-Subject: [PATCH 2/2] Make sure to use the binary for the correct architecture
-
----
- Makefile |    8 +++++++-
- 1 file changed, 7 insertions(+), 1 deletion(-)
-
-diff --git a/Makefile b/Makefile
-index bf30b03..1f9b974 100644
---- a/Makefile
-+++ b/Makefile
-@@ -113,6 +113,12 @@ ifeq ($(APIFINAL),WEXT)
-   $(info Using Wireless Extension API)
- endif
- 
-+ifeq ($(shell dpkg --print-architecture),amd64)
-+BINARCH = x86_64
-+else
-+BINARCH = i386
-+endif
-+
- obj-m              += wl.o
- 
- wl-objs            := 
-@@ -125,7 +131,7 @@ EXTRA_CFLAGS       += -I$(src)/src/include
- EXTRA_CFLAGS       += -I$(src)/src/wl/sys -I$(src)/src/wl/clm/api -I$(src)/src/wl/phy
- #EXTRA_CFLAGS       += -DBCMDBG_ASSERT
+--- a/Makefile	2020-05-18 17:42:57.325363688 +0600
++++ b/Makefile	2020-05-18 17:43:36.712132775 +0600
+@@ -126,7 +126,7 @@
+ EXTRA_CFLAGS       += -I$(src)/src/shared/bcmwifi/include
+ #EXTRA_CFLAGS       += -DBCMDBG_ASSERT -DBCMDBG_ERR
  
 -EXTRA_LDFLAGS      := $(src)/lib/wlc_hybrid.o_shipped
-+EXTRA_LDFLAGS      := $(src)/lib/wlc_hybrid.o_shipped_$(BINARCH)
++EXTRA_LDFLAGS      := $(src)/lib/wlc_hybrid.o_shipped_x86_64
  
  KBASE              ?= /lib/modules/`uname -r`
  KBUILD_DIR         ?= $(KBASE)/build
--- 
-1.7.9.5
-
diff --git a/data/usr/src/bcmwl-6.30.223.271+bdcom/patches/0013-gcc.patch b/data/usr/src/bcmwl-6.30.223.271+bdcom/patches/0013-gcc.patch
index 6005efb..ee77aef 100644
--- a/data/usr/src/bcmwl-6.30.223.271+bdcom/patches/0013-gcc.patch
+++ b/data/usr/src/bcmwl-6.30.223.271+bdcom/patches/0013-gcc.patch
@@ -1,11 +1,11 @@
 --- a/Makefile	2014-06-26 10:42:08.000000000 +0000
 +++ b/Makefile	2014-07-17 22:44:01.662297228 +0000
-@@ -132,6 +132,8 @@
+@@ -126,6 +126,8 @@
  EXTRA_CFLAGS       += -I$(src)/src/shared/bcmwifi/include
  #EXTRA_CFLAGS       += -DBCMDBG_ASSERT -DBCMDBG_ERR
  
 +EXTRA_CFLAGS       += -Wno-date-time
 +
- EXTRA_LDFLAGS      := $(src)/lib/wlc_hybrid.o_shipped_$(BINARCH)
+ EXTRA_LDFLAGS      := $(src)/lib/wlc_hybrid.o_shipped_x86_64
  
  KBASE              ?= /lib/modules/`uname -r`
diff --git a/data/usr/src/bcmwl-6.30.223.271+bdcom/patches/0028-add-support-for-linux-5.6.patch b/data/usr/src/bcmwl-6.30.223.271+bdcom/patches/0028-add-support-for-linux-5.6.patch
index d403ea0..56c9449 100644
--- a/data/usr/src/bcmwl-6.30.223.271+bdcom/patches/0028-add-support-for-linux-5.6.patch
+++ b/data/usr/src/bcmwl-6.30.223.271+bdcom/patches/0028-add-support-for-linux-5.6.patch
@@ -8,14 +8,14 @@ https://git.archlinux.org/svntogit/community.git/commit/trunk?h=packages/broadco
 
 Signed-off-by: Alberto Milone <alberto.milone@canonical.com>
 ---
- src/src/shared/linux_osl.c |  4 ++++
- src/src/wl/sys/wl_linux.c  | 15 +++++++++++++++
+ src/shared/linux_osl.c |  4 ++++
+ src/wl/sys/wl_linux.c  | 15 +++++++++++++++
  2 files changed, 19 insertions(+)
 
-diff --git a/src/src/shared/linux_osl.c b/src/src/shared/linux_osl.c
+diff --git a/src/shared/linux_osl.c b/src/shared/linux_osl.c
 index 6157d18..c6d1aed 100644
---- a/src/src/shared/linux_osl.c
-+++ b/src/src/shared/linux_osl.c
+--- a/src/shared/linux_osl.c
++++ b/src/shared/linux_osl.c
 @@ -942,7 +942,11 @@ osl_getcycles(void)
  void *
  osl_reg_map(uint32 pa, uint size)
@@ -28,10 +28,10 @@ index 6157d18..c6d1aed 100644
  }
  
  void
-diff --git a/src/src/wl/sys/wl_linux.c b/src/src/wl/sys/wl_linux.c
+diff --git a/src/wl/sys/wl_linux.c b/src/wl/sys/wl_linux.c
 index 0d05100..8aa60f4 100644
---- a/src/src/wl/sys/wl_linux.c
-+++ b/src/src/wl/sys/wl_linux.c
+--- a/src/wl/sys/wl_linux.c
++++ b/src/wl/sys/wl_linux.c
 @@ -582,7 +582,11 @@ wl_attach(uint16 vendor, uint16 device, ulong regs,
  	}
  	wl->bcm_bustype = bustype;
diff --git a/data/usr/src/bcmwl-6.30.223.271+bdcom/patches/0029-fix-kernel-warnings.patch b/data/usr/src/bcmwl-6.30.223.271+bdcom/patches/0029-fix-kernel-warnings.patch
new file mode 100644
index 0000000..f2c3e86
--- /dev/null
+++ b/data/usr/src/bcmwl-6.30.223.271+bdcom/patches/0029-fix-kernel-warnings.patch
@@ -0,0 +1,161 @@
+--- a/src/wl/sys/wl_cfg80211_hybrid.c	2020-05-19 00:35:59.721356535 +0600
++++ b/src/wl/sys/wl_cfg80211_hybrid.c	2020-05-19 01:14:50.502014751 +0600
+@@ -1981,7 +1981,7 @@
+ 
+ 	if (dtoh32(bi->length) > WL_BSS_INFO_MAX) {
+ 		WL_DBG(("Beacon is larger than buffer. Discarding\n"));
+-		return err;
++		return -E2BIG;
+ 	}
+ 	notif_bss_info = kzalloc(sizeof(*notif_bss_info) + sizeof(*mgmt) - sizeof(u8) +
+ 	                         WL_BSS_INFO_MAX, GFP_KERNEL);
+@@ -2005,9 +2005,15 @@
+ 	beacon_proberesp->capab_info = cpu_to_le16(bi->capability);
+ 	wl_rst_ie(wl);
+ 
+-	wl_mrg_ie(wl, ((u8 *) bi) + bi->ie_offset, bi->ie_length);
+-	wl_cp_ie(wl, beacon_proberesp->variable, WL_BSS_INFO_MAX -
++	err = wl_mrg_ie(wl, ((u8 *) bi) + bi->ie_offset, bi->ie_length);
++	if (err)
++		goto inform_single_bss_out;
++
++	err = wl_cp_ie(wl, beacon_proberesp->variable, WL_BSS_INFO_MAX -
+ 	         offsetof(struct wl_cfg80211_bss_info, frame_buf));
++	if (err)
++		goto inform_single_bss_out;
++
+ 	notif_bss_info->frame_len = offsetof(struct ieee80211_mgmt, u.beacon.variable) +
+ 	                            wl_get_ielen(wl);
+ #if LINUX_VERSION_CODE >= KERNEL_VERSION(2, 6, 39)
+@@ -2019,14 +2025,14 @@
+ #endif
+ 	if (freq == 0) {
+ 		WL_ERR(("Invalid channel, fail to chcnage channel to freq\n"));
+-		kfree(notif_bss_info);
+-		return -EINVAL;
++		err = -EINVAL;
++		goto inform_single_bss_out;
+ 	}
+ 	channel = ieee80211_get_channel(wiphy, freq);
+ 	if (unlikely(!channel)) {
+ 		WL_ERR(("ieee80211_get_channel error\n"));
+-		kfree(notif_bss_info);
+-		return -EINVAL;
++		err = -EINVAL;
++		goto inform_single_bss_out;
+ 	}
+ 
+ 	WL_DBG(("SSID : \"%s\", rssi %d, channel %d, capability : 0x04%x, bssid %pM\n",
+@@ -2034,28 +2040,37 @@
+ 		mgmt->u.beacon.capab_info, &bi->BSSID));
+ 
+ 	signal = notif_bss_info->rssi * 100;
+-	cbss = cfg80211_inform_bss_frame(wiphy, channel, mgmt,
+-	    le16_to_cpu(notif_bss_info->frame_len), signal, GFP_KERNEL);
+-	if (unlikely(!cbss)) {
+-		WL_ERR(("cfg80211_inform_bss_frame error\n"));
+-		kfree(notif_bss_info);
+-		return -EINVAL;
+-	}
+ 
+-	notify_ie = (u8 *)bi + le16_to_cpu(bi->ie_offset);
+-	notify_ielen = le32_to_cpu(bi->ie_length);
++	if (!wl->scan_request) {
++		cbss = cfg80211_inform_bss_frame(wiphy, channel, mgmt,
++			le16_to_cpu(notif_bss_info->frame_len), signal, GFP_KERNEL);
++		if (unlikely(!cbss)) {
++			WL_ERR(("cfg80211_inform_bss_frame error\n"));
++			err = -ENOMEM;
++			goto inform_single_bss_out;
++		}
++	} else {
++		notify_ie = (u8 *)bi + le16_to_cpu(bi->ie_offset);
++		notify_ielen = le32_to_cpu(bi->ie_length);
+ #if LINUX_VERSION_CODE < KERNEL_VERSION(3, 18, 0)
+-	cbss = cfg80211_inform_bss(wiphy, channel, (const u8 *)(bi->BSSID.octet),
+-		0, beacon_proberesp->capab_info, beacon_proberesp->beacon_int,
+-		(const u8 *)notify_ie, notify_ielen, signal, GFP_KERNEL);
++		cbss = cfg80211_inform_bss(wiphy, channel, (const u8 *)(bi->BSSID.octet),
++			0, beacon_proberesp->capab_info, beacon_proberesp->beacon_int,
++			(const u8 *)notify_ie, notify_ielen, signal, GFP_KERNEL);
+ #else
+-	cbss = cfg80211_inform_bss(wiphy, channel, CFG80211_BSS_FTYPE_UNKNOWN, (const u8 *)(bi->BSSID.octet),
+-		0, beacon_proberesp->capab_info, beacon_proberesp->beacon_int,
+-		(const u8 *)notify_ie, notify_ielen, signal, GFP_KERNEL);
++		cbss = cfg80211_inform_bss(wiphy, channel,
++				wl->active_scan ?
++				CFG80211_BSS_FTYPE_PRESP : CFG80211_BSS_FTYPE_BEACON,
++				(const u8 *)(bi->BSSID.octet), 0,
++				beacon_proberesp->capab_info,
++				beacon_proberesp->beacon_int,
++				(const u8 *)notify_ie, notify_ielen, signal, GFP_KERNEL);
+ #endif
+-
+-	if (unlikely(!cbss))
+-		return -ENOMEM;
++		if (unlikely(!cbss)) {
++			WL_ERR(("cfg80211_inform_bss error\n"));
++			err = -ENOMEM;
++			goto inform_single_bss_out;
++		}
++	}
+ 
+ #if LINUX_VERSION_CODE >= KERNEL_VERSION(3, 9, 0)
+ 	cfg80211_put_bss(wiphy, cbss);
+@@ -2063,6 +2078,7 @@
+ 	cfg80211_put_bss(cbss);
+ #endif
+ 
++inform_single_bss_out:
+ 	kfree(notif_bss_info);
+ 
+ 	return err;
+@@ -2329,6 +2345,9 @@
+ 		if (err)
+ 			goto update_bss_info_out;
+ 
++		bss = cfg80211_get_bss(wl_to_wiphy(wl), NULL, (s8 *)&wl->bssid,
++		      ssid->SSID, ssid->SSID_len, WLAN_CAPABILITY_ESS, WLAN_CAPABILITY_ESS);
++
+ 		ie = ((u8 *)bi) + bi->ie_offset;
+ 		ie_len = bi->ie_length;
+ 	} else {
+@@ -2341,11 +2360,18 @@
+ 		ie_len = bss->len_information_elements;
+ #endif
+ 		wl->conf->channel = *bss->channel;
++	}
++
++	if (bss) {
+ #if LINUX_VERSION_CODE >= KERNEL_VERSION(3, 9, 0)
+ 		cfg80211_put_bss(wiphy, bss);
+ #else
+ 		cfg80211_put_bss(bss);
+ #endif
++	} else {
++		WL_DBG(("Could not update BSS\n"));
++		err = -EINVAL;
++		goto update_bss_info_out;
+ 	}
+ 
+ 	tim = bcm_parse_tlvs(ie, ie_len, WLAN_EID_TIM);
+@@ -2376,10 +2402,17 @@
+ #endif
+ 	s32 err = 0;
+ 
+-	wl_get_assoc_ies(wl);
++	err = wl_get_assoc_ies(wl);
++	if (err)
++		return err;
++
+ 	memcpy(wl->profile->bssid, &e->addr, ETHER_ADDR_LEN);
+ 	memcpy(&wl->bssid, &e->addr, ETHER_ADDR_LEN);
+-	wl_update_bss_info(wl);
++
++	err = wl_update_bss_info(wl);
++	if (err)
++		return err;
++
+ #if LINUX_VERSION_CODE < KERNEL_VERSION(4, 12, 0)
+ 	cfg80211_roamed(ndev,
+ #if LINUX_VERSION_CODE > KERNEL_VERSION(2, 6, 39)
